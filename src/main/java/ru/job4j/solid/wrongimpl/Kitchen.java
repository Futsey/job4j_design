package ru.job4j.solid.wrongimpl;

import ru.job4j.solid.experimental.Truekitchen;

public interface Kitchen {

    /** 1. Первое нарушение принципа SRP было бы в случае создания не интерфейса,
     * а класса, где мы прописали бы сразу реализацию каждого метода и, как следствие, любое переиспользование метода
     * зависело бы от конкретной реализации, т.е. борщ и жареная картошечка у нас бы готовлись одинаково
     *
     * 2. Второе нарушение принципа SRP у нас в этом интерфейсе, где мы можем и приготовить и помыть посуду,
     * но это два разных процесса, соответственно необходимо их разделить.
     *
     * 3. Третье нарушение, вытекающее из первых двух - совершенно неверная архитектура построения процессов.
     * Начали вроде за здравие, создав кухню, где мы можем готовить и мыть, но в ходе реализации стало очевидно,
     * насколько все громоздко и неудобно получается. Предположу, что правильным решением было
     * бы сделать каждый метод не методом, а интерфейсом с собственным контрактом на узкоспецилализированные действия
     * @see Truekitchen
     */
    void cook();

    void washDishes();
}
